import tkinter as tk
from tkinter import messagebox, simpledialog, ttk
import json
import os

# OOP Pillar: Encapsulation
# The Contact class encapsulates the details of a contact.
class Contact:
    def __init__(self, name, country_code, phone, email):
        self.name = name
        self.country_code = country_code
        self.phone = phone
        self.email = email

# OOP Pillar: Abstraction
# The ContactFactory class provides a simple interface for creating Contact objects.
class ContactFactory:
    @staticmethod
    def create_contact(name, country_code, phone, email):
        return Contact(name, country_code, phone, email)

# OOP Pillar: Singleton Pattern
# The ContactBookApp class ensures only one instance of the application exists.
class ContactBookApp:
    _instance = None

    def __new__(cls, *args, **kwargs):
        if not cls._instance:
            cls._instance = super().__new__(cls)
        return cls._instance

    def __init__(self, root):
        if hasattr(self, 'initialized') and self.initialized:
            return

        self.root = root
        self.root.title("Contact Book")
        self.root.geometry("600x500")
        self.contacts = []

        # List of country codes
        self.country_codes = [
            "+1 (USA)", "+44 (UK)", "+91 (India)", "+61 (Australia)", "+81 (Japan)", "+49 (Germany)",
            "+86 (China)", "+33 (France)", "+39 (Italy)", "+7 (Russia)", "+34 (Spain)", "+55 (Brazil)",
            "+27 (South Africa)", "+82 (South Korea)", "+31 (Netherlands)", "+47 (Norway)", "+46 (Sweden)",
            "+41 (Switzerland)", "+90 (Turkey)", "+1 (Canada)", "+64 (New Zealand)", "+60 (Malaysia)",
            "+65 (Singapore)", "+62 (Indonesia)", "+63 (Philippines)", "+66 (Thailand)", "+92 (Pakistan)",
            "+98 (Iran)", "+20 (Egypt)", "+32 (Belgium)", "+45 (Denmark)", "+30 (Greece)", "+353 (Ireland)",
            "+354 (Iceland)", "+52 (Mexico)", "+234 (Nigeria)", "+351 (Portugal)", "+40 (Romania)",
            "+48 (Poland)", "+61 (Papua New Guinea)", "+679 (Fiji)", "+501 (Belize)", "+505 (Nicaragua)",
            "+370 (Lithuania)", "+372 (Estonia)", "+371 (Latvia)"
        ]

        # Create UI Elements
        self.create_widgets()
        self.load_contacts()

        self.initialized = True

    def create_widgets(self):
        # Add Contact Form
        tk.Label(self.root, text="Name:").grid(row=0, column=0, padx=10, pady=10)
        self.name_entry = tk.Entry(self.root)
        self.name_entry.grid(row=0, column=1, padx=10, pady=10)

        tk.Label(self.root, text="Country Code:").grid(row=1, column=0, padx=10, pady=10)
        self.country_code_combo = ttk.Combobox(self.root, values=self.country_codes)
        self.country_code_combo.grid(row=1, column=1, padx=10, pady=10)
        self.country_code_combo.current(0)  # Set default value

        tk.Label(self.root, text="Phone:").grid(row=2, column=0, padx=10, pady=10)
        self.phone_entry = tk.Entry(self.root)
        self.phone_entry.grid(row=2, column=1, padx=10, pady=10)

        tk.Label(self.root, text="Email:").grid(row=3, column=0, padx=10, pady=10)
        self.email_entry = tk.Entry(self.root)
        self.email_entry.grid(row=3, column=1, padx=10, pady=10)

        self.add_button = tk.Button(self.root, text="Add Contact", command=self.add_contact)
        self.add_button.grid(row=4, column=0, columnspan=2, pady=10)

        # Contact List
        self.contact_listbox = tk.Listbox(self.root, width=50)
        self.contact_listbox.grid(row=5, column=0, columnspan=2, padx=10, pady=10)

        # Edit, Delete, and Copy buttons
        self.edit_button = tk.Button(self.root, text="Edit Contact", command=self.edit_contact)
        self.edit_button.grid(row=6, column=0, pady=10)

        self.delete_button = tk.Button(self.root, text="Delete Contact", command=self.delete_contact)
        self.delete_button.grid(row=6, column=1, pady=10)

        self.copy_button = tk.Button(self.root, text="Copy Contact", command=self.copy_contact)
        self.copy_button.grid(row=7, column=0, columnspan=2, pady=10)

        # Search bar
        tk.Label(self.root, text="Search:").grid(row=8, column=0, padx=10, pady=10)
        self.search_entry = tk.Entry(self.root)
        self.search_entry.grid(row=8, column=1, padx=10, pady=10)
        self.search_entry.bind("<KeyRelease>", self.search_contacts)

    def add_contact(self):
        name = self.name_entry.get()
        country_code = self.country_code_combo.get().split(' ')[0]
        phone = self.phone_entry.get()
        email = self.email_entry.get()
        if name and country_code and phone and email:
            contact = ContactFactory.create_contact(name, country_code, phone, email)
            self.contacts.append(contact)
            self.update_contact_listbox()
            self.name_entry.delete(0, tk.END)
            self.phone_entry.delete(0, tk.END)
            self.email_entry.delete(0, tk.END)
            self.save_contacts()
        else:
            messagebox.showwarning("Input Error", "All fields are required")

    def edit_contact(self):
        selected_contact_index = self.contact_listbox.curselection()
        if selected_contact_index:
            selected_contact_index = selected_contact_index[0]
            contact = self.contacts[selected_contact_index]
            new_name = simpledialog.askstring("Edit Contact", "Enter new name:", initialvalue=contact.name)
            new_country_code = simpledialog.askstring("Edit Contact", "Enter new country code:", initialvalue=contact.country_code)
            new_phone = simpledialog.askstring("Edit Contact", "Enter new phone:", initialvalue=contact.phone)
            new_email = simpledialog.askstring("Edit Contact", "Enter new email:", initialvalue=contact.email)
            if new_name and new_country_code and new_phone and new_email:
                contact.name = new_name
                contact.country_code = new_country_code
                contact.phone = new_phone
                contact.email = new_email
                self.update_contact_listbox()
                self.save_contacts()
            else:
                messagebox.showwarning("Input Error", "All fields are required")
        else:
            messagebox.showwarning("Selection Error", "Select a contact to edit")

    def delete_contact(self):
        selected_contact_index = self.contact_listbox.curselection()
        if selected_contact_index:
            self.contacts.pop(selected_contact_index[0])
            self.update_contact_listbox()
            self.save_contacts()
        else:
            messagebox.showwarning("Selection Error", "Select a contact to delete")

    def copy_contact(self):
        selected_contact_index = self.contact_listbox.curselection()
        if selected_contact_index:
            selected_contact_index = selected_contact_index[0]
            contact = self.contacts[selected_contact_index]
            contact_details = f"Name: {contact.name}\nCountry Code: {contact.country_code}\nPhone: {contact.phone}\nEmail: {contact.email}"
            self.root.clipboard_clear()
            self.root.clipboard_append(contact_details)
            messagebox.showinfo("Copied", "Contact details copied to clipboard")
        else:
            messagebox.showwarning("Selection Error", "Select a contact to copy")

    def search_contacts(self, event):
        search_query = self.search_entry.get().lower()
        filtered_contacts = [contact for contact in self.contacts if search_query in contact.name.lower() or search_query in contact.phone or search_query in contact.email.lower()]
        self.update_contact_listbox(filtered_contacts)

    def update_contact_listbox(self, contacts=None):
        if contacts is None:
            contacts = self.contacts
        self.contact_listbox.delete(0, tk.END)
        for contact in contacts:
            self.contact_listbox.insert(tk.END, f"{contact.name} - {contact.country_code} {contact.phone} - {contact.email}")

    def save_contacts(self):
        contacts_data = [{"name": c.name, "country_code": c.country_code, "phone": c.phone, "email": c.email} for c in self.contacts]
        with open("contacts.json", "w") as file:
            json.dump(contacts_data, file)

    def load_contacts(self):
        if os.path.exists("contacts.json"):
            with open("contacts.json", "r") as file:
                contacts_data = json.load(file)
                for contact_data in contacts_data:
                    contact = Contact(contact_data["name"], contact_data["country_code"], contact_data["phone"], contact_data["email"])
                    self.contacts.append(contact)
            self.update_contact_listbox()

if __name__ == "__main__":
    root = tk.Tk()
    app = ContactBookApp(root)
    root.mainloop()

